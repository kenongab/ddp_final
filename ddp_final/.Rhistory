data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(mixtures)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("Hmisc")
?cut2
library(Hmisc)
?cut2
library(ggplot2)
training$index
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training)))
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training))) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training, color = cut2(Cement)))) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training, colour = cut2(Cement)))) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training, color = cut2(training$Cement)))) + geom_point()
g
?cut2
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = Cement)) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(Cement)) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(training$Cement)) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(Cement)) + geom_point()
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(Cement)) + geom_point()
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(Cement)) + geom_point()
d
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(Cement))) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(FlyAsh))) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(Age))) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(FlyAsh))) + geom_point()
g
names(training)
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(Water))) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(Cement))) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(BlastFurnaceSlag))) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(Superplasticizer))) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(CoarseAggregate))) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(FineAggregate))) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(Age))) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(FlyAsh))) + geom_point()
g
g <- ggplot(training, aes(x = CompressiveStrength, y = 1:nrow(training), color = cut2(Cement))) + geom_point()
g
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
head(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433); data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433); data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]; training = adData[ inTrain,]
testing = adData[-inTrain,]
head(names(training))
?preProcess
head(names(training), 10)
head(names(training), 20)
head(names(training), -20)
training[, names(training) %like% "IL"]
library(data.table)
training[, names(training) %like% "IL"]
subset <- training[, names(training) %like% "IL"]
subset <- training[, names(training) %like% "^IL"]
names(subset)
procdata <- preProcess(subset, method = "pca", thresh = 80)
procdata
procdata <- preProcess(subset, method = "pca", thresh = 0.8)
procdata
?predict
subset <- training[, c(names(training) %like% "^IL", diagnosis)]
names(subset)
subset <- training[,names(training) %like% "^IL"]
names(subset)
subset <- training[,  (names(training) %like% "^IL") & "diagnosis"]
subset <- training[,  (names(training) %like% "^IL") + "diagnosis"]
subset <- training[,  names(training) %like% "^IL & ^diagnosis$]
subset <- training[,  names(training) %like% "^IL & ^diagnosis$]
subset <- training[,  names(training) %like% "^IL & ^diagnosis$"]
names(subset)
subset <- training[,  names(training) %like% "^IL"]
names(subset)
names(training) %like% "^IL"
which(names(training) %like% "^IL")
which(names(training) == "diagnosis")
head(names(training))
subset <- training[, c(1,58:69)]
names(subset)
train'subset <- training[, c(1,58:69)]
train'subset <- training[, c(1,58:69)]
trainsubset <- training[, c(1,58:69)]
testsubset <- testing[, c(1, 58:69)]
model1 <- train(diagnosis ~ ., method = "lm", data = trainsubset)
model1 <- train(diagnosis ~ ., method = "glm", data = trainsubset)
install.packages('e1071', dependencies=TRUE)
model1 <- train(diagnosis ~ ., method = "glm", data = trainsubset)
processed <- preProcess(trainsubset, method = "pca", thresh = 0.8)
processed <- preProcess(trainsubset[,-12], method = "pca", thresh = 0.8)
trainPC <- predict(processed, trainsubset[,-12])
trainPC
processed
model2 <- train(trainsubset$diagnosis ~ ., method = "glm", data = trainPC)
names(trainsusbet[,-12])
names(trainsubset[,-12])
processed <- preProcess(trainsubset[,-1], method = "pca", thresh = 0.8)
trainPC <- predict(processed, trainsubset[,-1])
model2 <- train(trainsubset$diagnosis ~ ., model = "glm", data = trainPC)
names(transubset[,-1])
names(trainsubset[,-1])
model2 <- train(trainsubset[,1] ~ ., model = "glm", data = trainPC)
head(trainsubset[,1])
model2 <- train(diagnosis ~., data = trainsubset, method = "glm", preProc = "pca", trControl = trainControl(preProcOptions = list(thresh = 0.8)))
?confusionMatric
?confusionMatrix
testPC <- predict(processed, testsubset[,-1])
confusionMatrix(testsubset$diagnosis, predict(model2, testPC))
names(testsubset)
names(testsubset[,-1])
model1
model2
model1
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(mixtures$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433); data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]; training = adData[ inTrain,]
testing = adData[-inTrain,]
rm(list = ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433); data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]; training = adData[ inTrain,]
testing = adData[-inTrain,]
library(data.table)
subset <- training[, names(training) %like% "^IL"]
PC <- preProcess(subset, method = "pca", thresh = 0.9)
PC
model1 <- train(diagnosis ~ ., method = "glm", data = subset)
subset <- training[, c(1, 58:69)]
model1 <- train(diagnosis ~ ., method = "glm", data = subset)
model2 <- train(diagnosis ~ ., method = "glm", data = subset, preProc = "pca", trControl = trainControl(preProcOptions = list(thresh = 0.8)))
testsubset <- testing[, c(1, 58:69)]
predict(model1, testsubset)
table(predict(model, testsubset))
table(predict(model1, testsubset))
table(predict(model1, testsubset), testsubset$diagnosis)
table(testsubset$diagnosis, predict(model1, testsubset))
confusionMatrox(testsubset$diagnosis, predict(model1, testsubset))
confusionMatrix(testsubset$diagnosis, predict(model1, testsubset))
confusionMatrix(testsubset$diagnosis, predict(model2, testsubset))
?markerClusterOptions
library(leaflet)
?markerClusterOptions
rm(lsit = ls())
rm(list = ls90)
rm(list = ls())
library(caret)
?rpart
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
training <- createDataPartition(segmentationOriginal$Case)
training <- createDataPartition(segmentationOriginal$Case, p = 0.7, list = FALSE)
intraining <- createDataPartition(segmentationOriginal$Case, p = 0.7, list = FALSE)
training <- segmentationOriginal[intraining,]
training <- segmentationOriginal[-intraining,]
training <- segmentationOriginal[intraining,]
testing <- segmentationOriginal[-intraining,]
set.seed(125)
modFit <- rpart(Class ~ ., data = training)
?rpart
modFit <- rpart(Class ~ ., data = training)
library(caret)
modFit <- rpart(Class ~ ., data = training)
modFit <- model(Class ~ ., data = training, method = 'rpart')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTraining <- createDataPartition(segmentationOriginal$Case, p = 0.7, list = FALSE)
training <- segmentationOriginal[inTraining,]
testing <- segmentationOriginal[-inTraining,]
modFit <- rpart(Class ~ ., data = training)
modFit <- train(Class ~ ., data = training, method = 'rpart')
plot(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main = "Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE)
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = 0.5)
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
text(modFit$finalModel, use.n = TRUE, all = TRUE)
dev.off()
plot(modFit$finalModel, uniform = TRUE, main = "Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
olivefit <- train(Area ~., data = olive, method = 'rpart')
newdata = as.data.frame(t(colMeans(olive)))
table(predict(olivefit, newdata))
predict(olivefit, newdata)
head(olive[,2])
head(olive[,1:2])
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(SAheart)
features <- c(9,8,7,2,6,3)
modFit <- train(chd ~ features, data = trainSA, method = "glm", family = "binomial")
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
head(SAheart[,10])
modFit <- train(as.factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predicted <- predict(modFit, testSA)
missClass(testSA[,1], predicted)
predicted
head(SAtest[,1])
head(testSA[,1])
missClass(testSA[,10], predicted)
missClass(testSA[,10], as.integer(predicted)
)
1-0.6709957
predictedtrain <- predict(modFit, trainSA)
missClass(trainSA[,10], as.integer(predictedtrain))
1-0.6363
confusionMatrix(testSA[,10], predict(modFit, testSA))
confusionMatrix(as.factor(testSA[,10]), predict(modFit, testSA))
1-0.6883
confusionMatrix(as.factor(trainSA[,10]), predict(modFit, trainSA))
1-0.7273
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train[,1:4])
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
?randomForest
rforest <- train(y ~ ., data = vowel.train, method = 'rf', prox = TRUE)
getTree(rforest$finalModel, k = 3)
head(rforest$finak)
head(rforest$finalModel, k = 3)
varImp(rforest)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTraining <- createDataPartition(segmentationOriginal$Case, p = 0.7, list = FALSE)
set.seed(125)
training <- segmentationOriginal[inTraining,]
test <- segmentationOriginal[-inTraining,]
modFit <- train(Class ~ ., data = training, model = 'rpart')
modFit <- train(Class ~ ., data = training, model = 'rpart')
rm(list = ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTraining <- createDataPartition(segmentationOriginal$Case, p = 0.7, list = FALSE)
training <- segmentationOriginal[inTraining,]
test <- segmentationOriginal[-inTraining,]
modFit <- train(Class ~ ., data = training, method = 'rpart')
plot(modFit$finalModel)
text(modFit$finalModel, use.n = TRUE)
head(segmentationOriginal$Class)
dev.off()
plot(modFit$finalModel)
text(modFit$finalModel, use.n = TRUE)
par( mar = c(1,1,1,1))
par( mar = c(2,2,2,2))
library(ggplot2)
t <- ggplot(modFit$finalModel)
x11(width = 10, height = 10)
plot(modFit$finalModel)
text(modFit$finalModel, use.n = TRUE)
par(mar = c(1,1,1,1))
par(mar = c(0.1,0.1,0.1,0.1))
par(mar = c(4,4,4,4))
?colSums
?lm
?getMethod
getMethod(show)
install.packages("D:/Personal Stuff/Data Science/R Working Directory/DDPQuiz3_1.0.zip", repos = NULL, type = "win.binary")
rm(list = ls())
library(plotly)
library(datasets)
plot_ly(iris, x = Petal.Length, y = Petal.Width)
plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width)
plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width, color = ~Species)
plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width, color = ~Species, size = Sepal.Length)
plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width, color = ~Species, size = ~Sepal.Length)
?Puromycin
plot_ly(Puromycin, x = ~conc, y = ~rate)
plot_ly(Puromycin, x = ~conc, y = ~rate, type = "line")
plot_ly(Puromycin, x = ~conc, y = ~rate, type = "scatter", mode = "lines")
plot_ly(Puromycin, x = ~conc, y = ~rate, type = "scatter", mode = "lines")
?HairEyeColor
?crimtab
?ChickWeight
head(ChickWeight)
unique(ChickWeight$Chick)
head(ChickWeight, 15)
head(ChickWeight, 30)
end <- ChickWeight[ChickWeight$Time == 21,]
head(end)
plot_ly(end, x = ~Chick, y = ~weight, color = ~Diet)
plot_ly(end, x = ~Chick, y = ~weight, color = ~Diet, type = "markers")
plot_ly(end, x = ~Chick, y = ~weight, color = ~Diet, type = "scatter")
plot_ly(end, x = ~Chick, y = ~weight, color = ~Diet, type = "box")
plot_ly(end, x = ~Chick, y = ~weight, type = "box")
plot_ly(end, y = ~weight, type = "box")
plot_ly(end, y = ~weight, color = ~Chick, type = "box")
plot_ly(end, y = ~weight, color = ~Diet, type = "box")
?gbm
library(gbm)
install.packages("gbm")
library(pgmm)
install.packages("rpart")
install.packages("forecast")
library(e1071)
?plot.enet
library(caret)
?plot.enet
library(AppliedPredictiveModeling)
?plot.enet
library(e1071)
?plot.enet
??plot.enet
rm(list = ls())
library(shiny)
runApp('D:/Personal Stuff/Data Science/Developing Data Products/ddp_final/ddp_final')
library(jpeg)
setwd("D:/Personal Stuff/Data Science/Developing Data Products/ddp_final/ddp_final")
mona <- readJPEG("Gray-Scale-Mona-Lisa.jpg")
str(mona)
str(mona[[3]][1])
str(mona[1,3)
str(mona[1,3])
str(mona[[3]][2])
str(mona[[3]][3])
nrow(mona)
nrow(cat)
bw <- mona[,,1]
bw.pca <- prComp(bw, center = FALSE)
bw.pca <- prcomp(bw, center = FALSE)
compressed <- bw.pca[,1:3] %*% t(bw.pca$rotation[,1:3])
compressed <- bw.pca$x[,1:3] %*% t(bw.pca$rotation[,1:3])
writeJPEG(bw.pca, "compressed.jpg")
writeJPEG(compressed, "compressed.jpg")
compressed <- bw.pca$x[,1:10] %*% t(bw.pca$rotation[,1:10])
writeJPEG(compressed, "compressed.jpg")
compressed <- bw.pca$x[,1:30] %*% t(bw.pca$rotation[,1:30])
writeJPEG(compressed, "compressed.jpg")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?imageOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sliderInput
runApp()
runApp()
?p
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(bw.pca[1:5])
runApp()
runApp()
install.packages(rsconnect)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='kenongab', token='7CAC068B9EE945829BE4FC44FC0AF00A', secret='bJadIaXRIgrFi9/dL4iCJvDq1RK1MvJdDd0uSxwg')
Machine Learning Educational Tools: A Visualization of Principal Component Analysis
Machine Learning Educational Tools\: A Visualization of Principal Component Analysis
Machine Learning Educational Tools /: A Visualization of Principal Component Analysis
Machine Learning Educational Tools
A Visualization of Principal Component Analysis
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
